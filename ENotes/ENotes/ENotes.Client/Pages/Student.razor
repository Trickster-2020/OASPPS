@page "/students"
@inject IStudentService studentService
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]


    <div>
        <FluentTextField @bind-Value="new_Student.Id" AriaLabel="Id" Placeholder="Student Id"></FluentTextField>
        <FluentTextField @bind-Value="new_Student.Name" Placeholder="Name" Required />
        <FluentTextField @bind-Value="new_Student.Email" Placeholder="Email" Required />
        <FluentSelect name="Teacher" Id="Gender" @bind-Value="new_Student.Gender" TOption="string" Required>
            <FluentOption Value="Null">Select Gender..</FluentOption>
            <FluentOption Value="Male">Male</FluentOption>
            <FluentOption Value="Female">Female</FluentOption>
        </FluentSelect>
        <FluentTextField @bind-Value="new_Student.ContactNo" Placeholder="ContactNo" Required />
        <InputFile OnChange="HandleInput" Required></InputFile>

        <div>
            <FluentButton  Appearance="Appearance.Accent" OnClick="StudentSubmit">Submit</FluentButton>
        </div>
        <br />
        <FluentDivider>
        </FluentDivider>
    </div>



@if (data is not null)
{
    <div style="height: 434px; overflow:auto;" tabindex="-1">
        <FluentDataGrid Items="data" Virtualize="true" ItemSize="46" GenerateHeader="GenerateHeaderOption.Sticky" TGridItem="StudentDto">
            <PropertyColumn Title="ID" Property="@(p => p.Id)" />

            <PropertyColumn Title="Name" Property="@(p => p.Name)" />
            <PropertyColumn Title="Gender" Property="@(p => p.Gender)" />
            <PropertyColumn Title="Email" Property="@(p => p.Email)" />
            <PropertyColumn Title="Contact" Property="@(p => p.ContactNo)" />
            <TemplateColumn Title="Action">
                <a href="/studentprofile/@context.Id"><FluentButton>View</FluentButton></a>
            </TemplateColumn>
        </FluentDataGrid>
    </div>

}

@code {
    protected IQueryable<StudentDto>? data;
    protected StudentDto? new_Student = new StudentDto();
    protected string? fileUrl { get; set; }

    //As the page is loaded this function execute first which helps to load the data
    protected async override Task OnInitializedAsync()
    {
        data = (await this.studentService.Get_Students()).AsQueryable();

    }

    protected async Task HandleInput(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).ReadAsync(buffer);
        fileUrl = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
    }

    //Post subject method
    protected async void StudentSubmit()
    {
        new_Student.ImageURL = fileUrl;
        await this.studentService.Post_Student(new_Student);
    }


}

